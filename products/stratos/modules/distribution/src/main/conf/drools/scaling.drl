/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.stratos.autoscaler
//import org.netbeans.lib.cvsclient.commandLine.command.log.rule;

import org.apache.stratos.messaging.domain.topology.Service;
import org.apache.stratos.messaging.domain.topology.Cluster;
import org.apache.stratos.autoscaler.context.AutoscalerContext;
import org.apache.stratos.autoscaler.context.member.MemberStatsContext;
import org.apache.stratos.autoscaler.Constants;
import org.apache.stratos.autoscaler.context.partition.network.ClusterLevelNetworkPartitionContext;
import org.apache.stratos.autoscaler.pojo.policy.PolicyManager;
import org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy;
import org.apache.stratos.autoscaler.pojo.policy.deployment.DeploymentPolicy;
import org.apache.stratos.autoscaler.pojo.policy.autoscale.RequestsInFlight;
import org.apache.stratos.autoscaler.pojo.policy.autoscale.LoadThresholds;
import org.apache.stratos.autoscaler.pojo.policy.autoscale.MemoryConsumption;
import org.apache.stratos.autoscaler.pojo.policy.autoscale.LoadAverage;
import org.apache.stratos.autoscaler.client.CloudControllerClient;
import org.apache.stratos.autoscaler.algorithm.AutoscaleAlgorithm;
import org.apache.stratos.autoscaler.algorithm.OneAfterAnother;
import org.apache.stratos.autoscaler.algorithm.RoundRobin;
import org.apache.stratos.autoscaler.context.partition.ClusterLevelPartitionContext;
import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;
import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.network.NetworkPartition;
import org.apache.stratos.cloud.controller.stub.domain.Partition;
import org.apache.stratos.cloud.controller.stub.domain.MemberContext;
import org.apache.stratos.autoscaler.context.cluster.ClusterInstanceContext;

import org.apache.stratos.autoscaler.pojo.policy.autoscale.LoadAverage
import org.apache.stratos.autoscaler.pojo.policy.autoscale.MemoryConsumption

global org.apache.stratos.autoscaler.rule.RuleLog log;
global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;
global org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy autoscalePolicy;
global java.lang.String clusterId;
global java.lang.Boolean rifReset;
global java.lang.Boolean mcReset;
global java.lang.Boolean laReset;
global java.lang.Boolean isPrimary;
global java.util.List primaryMembers;
global java.lang.Boolean arspiReset;
global java.lang.String algorithmName;

rule "Scaling Rule"
dialect "mvel"
	when
       clusterInstanceContext : ClusterInstanceContext ()

        loadThresholds : LoadThresholds() from  autoscalePolicy.getLoadThresholds()
        autoscaleAlgorithm : AutoscaleAlgorithm() from  delegator.getAutoscaleAlgorithm(algorithmName)

        eval(log.debug("Running scale up rule: [network-partition] " + clusterInstanceContext.getNetworkPartitionId() + " [cluster] " + clusterId))
        eval(log.debug("[scaling] [network-partition] " + clusterInstanceContext.getNetworkPartitionId() + " [cluster] " + clusterId + " Algorithm name: " + algorithmName))
        eval(log.debug("[scaling] [network-partition] " + clusterInstanceContext.getNetworkPartitionId() + " [cluster] " + clusterId + " Algorithm: " + autoscaleAlgorithm))

	
        rifUpperLimit : Float() from  loadThresholds.getRequestsInFlight().getUpperLimit()

        rifAverage : Float() from  clusterInstanceContext.getAverageRequestsInFlight()
        rifGradient : Float() from  clusterInstanceContext.getRequestsInFlightGradient()
        rifSecondDerivative : Float() from  clusterInstanceContext.getRequestsInFlightSecondDerivative()
	    rifPredictedValue : Double() from delegator.getPredictedValueForNextMinute(rifAverage, rifGradient, rifSecondDerivative, 1)

        mcUpperLimit : Float() from  loadThresholds.getMemoryConsumption().getUpperLimit()

        mcPredictedValue : Double() from delegator.getMemoryConsumptionPredictedValue(clusterInstanceContext)

        laUpperLimit : Float() from  loadThresholds.getLoadAverage().getUpperLimit()

        laPredictedValue : Double() from delegator.getLoadAveragePredictedValue(clusterInstanceContext)

        activeInstancesCount : Integer() from clusterInstanceContext.getActiveMemberCount()
        requestsServedPerInstance : Float() from  clusterInstanceContext.getRequestsServedPerInstance()
        averageRequestsServedPerInstance : Float() from  clusterInstanceContext.getAverageRequestsServedPerInstance()

        numberOfInstancesReuquiredBasedOnRif : Integer() from delegator.getNumberOfInstancesRequiredBasedOnRif(rifPredictedValue, requestsServedPerInstance, averageRequestsServedPerInstance, arspiReset)
        numberOfInstancesReuquiredBasedOnMemoryConsumption : Integer() from delegator.getNumberOfInstancesRequiredBasedOnMemoryConsumption(mcUpperLimit, mcPredictedValue, clusterInstanceContext.getMaxInstanceCount(), clusterInstanceContext.getMinInstanceCount())
        numberOfInstancesReuquiredBasedOnLoadAverage : Integer() from delegator.getNumberOfInstancesRequiredBasedOnLoadAverage(laUpperLimit, laPredictedValue, clusterInstanceContext.getMinInstanceCount())

        numberOfRequiredInstances : Integer() from delegator.getMaxNumberOfInstancesRequired(numberOfInstancesReuquiredBasedOnRif, numberOfInstancesReuquiredBasedOnMemoryConsumption ,mcReset ,numberOfInstancesReuquiredBasedOnLoadAverage, laReset) 



        scaleUp : Boolean() from (activeInstancesCount < numberOfRequiredInstances)
        scaleDown : Boolean() from (activeInstancesCount > numberOfRequiredInstances)

        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF Resetted?: " + rifReset))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF predicted value: " + rifPredictedValue))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " RIF upper limit: " + rifUpperLimit))

        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC predicted value: " + mcPredictedValue))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " MC upper limit: " + mcUpperLimit))

        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA predicted value: " + laPredictedValue))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " LA upper limit: " + laUpperLimit))

        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " Scale-up action: " + scaleUp))
        eval(log.debug("[scaling] " + " [cluster] " + clusterId + " Scale-down action: " + scaleDown))

	then

	    log.debug("Number Of Required Instances " + numberOfRequiredInstances + " Instances Count " + activeInstancesCount);

        if(scaleUp){
            if (clusterInstanceContext.getNonTerminatedMemberCount() < clusterInstanceContext.getMaxInstanceCount()) {
                int additionalInstances = numberOfRequiredInstances - activeInstancesCount ;
                clusterInstanceContext.resetScaleDownRequestsCount();

                //Calculating the factor scaling
                float factor = numberOfRequiredInstances / clusterInstanceContext.getMinInstanceCount();
    //            delegator.delegateScalingDependencyNotification(clusterId, clusterInstanceContext.getId(), factor);

                boolean partitionsAvailable = true;
                int count = 0;                
                while(count != additionalInstances && partitionsAvailable){

                    ClusterLevelPartitionContext partitionContext =  (ClusterLevelPartitionContext)autoscaleAlgorithm.getNextScaleUpPartitionContext(clusterInstanceContext.getPartitionCtxtsAsAnArray());
                    if(partitionContext != null){

                        log.info("[scale-up] Partition available, hence trying to spawn an instance to scale up!" );
                        log.debug("[scale-up] " + " [partition] " + partitionContext.getPartitionId() + " [cluster] " + clusterId );
                        log.debug("[scale-up] " + " has scaling dependents " + clusterInstanceContext.isHasScalingDependants() + " [cluster] " + clusterId );
                        if(clusterInstanceContext.isHasScalingDependants()) {
                        	delegator.delegateScalingDependencyNotification(clusterId, clusterInstanceContext.getNetworkPartitionId(), factor);
                        } else {
                        	delegator.delegateSpawn(partitionContext, clusterId, clusterInstanceContext.getId(), isPrimary);
                        }
                        count++;
                    } else {

                        partitionsAvailable = false;
                    }
                }
            } else{
                log.info("[scale-up] Max is reached, hence not scaling up [cluster] " + clusterId + " [instance id]" + clusterInstanceContext.getId() + " [max] " + clusterInstanceContext.getMaxInstanceCount());
            }
        } else if(scaleDown){

            if(clusterInstanceContext.getNonTerminatedMemberCount() > clusterInstanceContext.getMinInstanceCount){


                float factor = numberOfRequiredInstances / clusterInstanceContext.getMinInstanceCount();
    //            delegator.delegateScalingDependencyNotification(clusterId, clusterInstanceContext.getNetworkPartitionId(), factor);

                log.debug("[scale-down] Decided to Scale down [cluster] " + clusterId);
                if(clusterInstanceContext.getScaleDownRequestsCount() > 5 ){

                    log.debug("[scale-down] Reached scale down requests threshold [cluster] " + clusterId + " Count " + clusterInstanceContext.getScaleDownRequestsCount());
                    MemberStatsContext selectedMemberStatsContext = null;
                    double lowestOverallLoad = 0.0;
                    boolean foundAValue = false;
                    ClusterLevelPartitionContext partitionContext =  (ClusterLevelPartitionContext) autoscaleAlgorithm.getNextScaleDownPartitionContext((clusterInstanceContext.getPartitionCtxtsAsAnArray()));
                    if(partitionContext != null){
                        log.info("[scale-down] Partition available to scale down ");
    //                    log.debug("[scale-down] " + " [partition] " + partition.getId() + " [cluster] " + clusterId);
    //                    partitionContext = clusterInstanceContext.getPartitionCtxt(partition.getId());
    //

                        // In partition context member stat context, all the primary members need to be
                        // avoided being selected as the member to terminated


                        for(MemberStatsContext memberStatsContext: partitionContext.getMemberStatsContexts().values()){

                            if( !primaryMembers.contains(memberStatsContext.getMemberId()) ) {

                            LoadAverage loadAverage = memberStatsContext.getLoadAverage();
                            log.debug("[scale-down] " + " [cluster] "
                                + clusterId + " [member] " + memberStatsContext.getMemberId() + " Load average: " + loadAverage);

                            MemoryConsumption memoryConsumption = memberStatsContext.getMemoryConsumption();
                            log.debug("[scale-down] " + " [partition] " + partitionContext.getPartitionId() + " [cluster] "
                                + clusterId + " [member] " + memberStatsContext.getMemberId() + " Memory consumption: " + memoryConsumption);

                            double predictedCpu = delegator.getPredictedValueForNextMinute(loadAverage.getAverage(),loadAverage.getGradient(),loadAverage.getSecondDerivative(), 1);
                            log.debug("[scale-down] " + " [partition] " + partitionContext.getPartitionId() + " [cluster] "
                                + clusterId + " [member] " + memberStatsContext.getMemberId() + " Predicted CPU: " + predictedCpu);

                            double predictedMemoryConsumption = delegator.getPredictedValueForNextMinute(memoryConsumption.getAverage(),memoryConsumption.getGradient(),memoryConsumption.getSecondDerivative(), 1);
                            log.debug("[scale-down] " + " [partition] " + partitionContext.getPartitionId() + " [cluster] "
                                + clusterId + " [member] " + memberStatsContext.getMemberId() + " Predicted memory consumption: " + predictedMemoryConsumption);

                            double overallLoad = (predictedCpu + predictedMemoryConsumption) / 2;
                            log.debug("[scale-down] " + " [partition] " + partitionContext.getPartitionId() + " [cluster] "
                                + clusterId + " [member] " + memberStatsContext.getMemberId() + " Overall load: " + overallLoad);

                            if(!foundAValue){
                                foundAValue = true;
                                selectedMemberStatsContext = memberStatsContext;
                                lowestOverallLoad = overallLoad;
                            } else if(overallLoad < lowestOverallLoad){
                                selectedMemberStatsContext = memberStatsContext;
                                lowestOverallLoad = overallLoad;
                            }


                          }

                        }
                        if(selectedMemberStatsContext != null) {
                            log.info("[scale-down] Trying to terminating an instace to scale down!" );
                            log.debug("[scale-down] " + " [partition] " + partitionContext.getPartitionId() + " [cluster] "
                                + clusterId + " Member with lowest overall load: " + selectedMemberStatsContext.getMemberId());

                            delegator.delegateTerminate(partitionContext, selectedMemberStatsContext.getMemberId());
                        }
                    }
                } else{
                     log.debug("[scale-down] Not reached scale down requests threshold. " + clusterId + " Count " + clusterInstanceContext.getScaleDownRequestsCount());
                     clusterInstanceContext.increaseScaleDownRequestsCount();

                }
            } else {
                log.info("[scale-down] Min is reached, hence not scaling down [cluster] " + clusterId + " [instance id]" + clusterInstanceContext.getId());
            }
        }  else{
            log.debug("[scaling] No decision made to either scale up or scale down ... ");

        }

end




